package week5

object mapp {

  def squareList1(xs: List[Int]): List[Int] =
    xs match {
      case Nil     => xs
      case y :: ys => y * y :: squareList1(ys)
    }

  def squareList2(xs: List[Int]): List[Int] =
    xs map (x => x * x)

  var l = List(1, 2, 3, 4, 5)

  squareList1(l)
  squareList2(l)

  l filter (x => x > 3)

  var t = List('a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'd', 'a', 'a')
  t takeWhile (y => y != 'b')
  t dropWhile (y => y == 'a')

  def pack[T](xs: List[T]): List[List[T]] = xs match {
    case Nil      => Nil
    case x :: xs1 => List(xs.takeWhile(y => y == x)) :: List(List('b','b')) //pack(xs.dropWhile(y => y != x))
  }

  pack(t)
}